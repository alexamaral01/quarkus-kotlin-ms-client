plugins {
    id 'org.jetbrains.kotlin.jvm' version "2.1.10"
    id "org.jetbrains.kotlin.plugin.allopen" version "2.1.10"
    id 'io.quarkus'
    id 'org.openapi.generator' version '7.5.0'
    id 'org.sonarqube' version "4.4.1.3373"
    id 'jacoco'
    id("org.owasp.dependencycheck") version "8.4.0"
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'io.quarkus:quarkus-rest-jackson'
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-rest'
    implementation 'io.quarkus:quarkus-kotlin'
    implementation 'io.quarkus:quarkus-config-yaml'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'io.quarkus:quarkus-arc'
    implementation "com.squareup.okhttp3:okhttp:4.10.0"

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
}

group 'org.acme'
version '1.0.0-SNAPSHOT'

var jacocoReportPath = layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml")

sonarqube {
    properties {
        property("sonar.gradle.skipCompile", "true")
        property("sonar.projectKey", "alexamaral01_quarkus-kotlin-ms-customer")
        property("sonar.branch.name", "main")
        property("sonar.host.url", "https://sonarcloud.io")
        property("sonar.login", System.getenv("SONAR_TOKEN"))
        property("sonar.organization", "alexamaral01")
        property("sonar.coverage.jacoco.xmlReportPaths", jacocoReportPath.get().asFile.absolutePath )
    }
}

dependencyCheck {
    failBuildOnCVSS = 7.0 // falha o build se vulnerabilidade for CVSS >= 7
    suppressionFile = "dependency-check-suppressions.xml" // opcional
    analyzers.assemblyEnabled = false // desabilita análise .NET
}

jacoco {
    toolVersion = "0.8.11" // versão estável
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport) // gera o relatório após os testes
}

allOpen {
    annotation("jakarta.ws.rs.Path")
    annotation("jakarta.enterprise.context.ApplicationScoped")
    annotation("jakarta.persistence.Entity")
    annotation("io.quarkus.test.junit.QuarkusTest")
}


kotlin {
    jvmToolchain(21)

    compilerOptions {
        freeCompilerArgs.add("-Xjsr305=strict")
        javaParameters.set(true)
    }
}

// Tasks

tasks.register("sonarForce") {// ./gradlew sonarForce
    dependsOn("build", "jacocoTestReport")
    finalizedBy("sonar")
}

tasks.jacocoTestReport {
    dependsOn(tasks.test) // garante que o relatório só será gerado após os testes
    reports {
        xml.required.set(true) // necessário para Sonar
        html.required.set(true)
    }
}
